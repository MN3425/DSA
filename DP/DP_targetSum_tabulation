public class DP_targetSum_tabulation {
    static int Unboundedknapsack(int val[], int wt[], int W) {
        int n= val.length;
        int dp[][]= new int[n+1][W+1];

        for(int i=0;i< n+1;i++){
            for(int j=1; j< W+1;j++){
                //initializing the first row as we know, when no item in sack means all row result will be 0 and 
                //vise versa as selecting none items some equals 0 i.e the sum equals 0
                
            }
        }
    }

    public static void print(int dp[][]) {
        for (int i = 0; i < dp.length; i++) {
            for (int j = 0; j < dp[0].length; j++) {
                System.out.print(dp[i][j] + " ");
            }
            System.out.println();

        }
    }

    public static int knapasackTab(int val[], int wt[], int W) {
        int n = val.length;
        int dp[][] = new int[n + 1][W + 1];
        for (int i = 0; i < dp.length; i++) {
            dp[i][0] = 0;
        }
        for (int j = 0; j < dp[0].length; j++) {
            dp[0][j] = 0;
        }
        for (int i = 1; i < n + 1; i++) {
            for (int j = 1; j < W + 1; j++) {
                int v = val[i - 1];// i's val
                int w = wt[i - 1];// i's wt

                if (w <= j) {// valid
                    int incProfit = v + dp[i - 1][j - w];
                    int excProfit = dp[i - 1][j];
                    dp[i][j] = Math.max(incProfit, excProfit);
                } else {// when not valid
                    int excProfit = dp[i - 1][j];
                    dp[i][j] = excProfit;
                }

            }

        }
        print(dp);
        return dp[n][W];
    }

    public static void main(String args[]) {
        int val[] = { 15, 14, 10, 45, 30 };
        int wt[] = { 2, 5, 1, 3, 4 };// variable 1
        int W = 7;// variable 2
        // making 2d array to store values
        int dp[][] = new int[val.length + 1][W + 1];
        for (int i = 0; i < dp.length; i++) {
            for (int j = 0; j < dp[0].length; j++) {
                dp[i][j] = -1;
            }
        }

        // System.out.println(knapsack(val, wt, W, val.length, dp));

        System.out.println(knapasackTab(val, wt, W));

    }
}